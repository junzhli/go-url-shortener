// Code generated by MockGen. DO NOT EDIT.
// Source: mysql.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	database "url-shortener/internal/database"
)

// MockMySQLService is a mock of MySQLService interface
type MockMySQLService struct {
	ctrl     *gomock.Controller
	recorder *MockMySQLServiceMockRecorder
}

// MockMySQLServiceMockRecorder is the mock recorder for MockMySQLService
type MockMySQLServiceMockRecorder struct {
	mock *MockMySQLService
}

// NewMockMySQLService creates a new mock instance
func NewMockMySQLService(ctrl *gomock.Controller) *MockMySQLService {
	mock := &MockMySQLService{ctrl: ctrl}
	mock.recorder = &MockMySQLServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMySQLService) EXPECT() *MockMySQLServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method
func (m *MockMySQLService) CreateUser(user database.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockMySQLServiceMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockMySQLService)(nil).CreateUser), user)
}

// CreateGoogleUser mocks base method
func (m *MockMySQLService) CreateGoogleUser(user database.User, gUser database.GoogleUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGoogleUser", user, gUser)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGoogleUser indicates an expected call of CreateGoogleUser
func (mr *MockMySQLServiceMockRecorder) CreateGoogleUser(user, gUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGoogleUser", reflect.TypeOf((*MockMySQLService)(nil).CreateGoogleUser), user, gUser)
}

// GetUserWithEmail mocks base method
func (m *MockMySQLService) GetUserWithEmail(email string) (*database.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithEmail", email)
	ret0, _ := ret[0].(*database.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithEmail indicates an expected call of GetUserWithEmail
func (mr *MockMySQLServiceMockRecorder) GetUserWithEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithEmail", reflect.TypeOf((*MockMySQLService)(nil).GetUserWithEmail), email)
}

// GetUserWithID mocks base method
func (m *MockMySQLService) GetUserWithID(userId string) (*database.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithID", userId)
	ret0, _ := ret[0].(*database.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithID indicates an expected call of GetUserWithID
func (mr *MockMySQLServiceMockRecorder) GetUserWithID(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithID", reflect.TypeOf((*MockMySQLService)(nil).GetUserWithID), userId)
}

// GetURLIfExistsWithUser mocks base method
func (m *MockMySQLService) GetURLIfExistsWithUser(user database.User, oriURL string) (*database.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLIfExistsWithUser", user, oriURL)
	ret0, _ := ret[0].(*database.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLIfExistsWithUser indicates an expected call of GetURLIfExistsWithUser
func (mr *MockMySQLServiceMockRecorder) GetURLIfExistsWithUser(user, oriURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLIfExistsWithUser", reflect.TypeOf((*MockMySQLService)(nil).GetURLIfExistsWithUser), user, oriURL)
}

// CreateURL mocks base method
func (m *MockMySQLService) CreateURL(oriURL, shortenURL string, user database.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateURL", oriURL, shortenURL, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateURL indicates an expected call of CreateURL
func (mr *MockMySQLServiceMockRecorder) CreateURL(oriURL, shortenURL, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateURL", reflect.TypeOf((*MockMySQLService)(nil).CreateURL), oriURL, shortenURL, user)
}

// GetURLWithShortenURL mocks base method
func (m *MockMySQLService) GetURLWithShortenURL(shortenURL string) (*database.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLWithShortenURL", shortenURL)
	ret0, _ := ret[0].(*database.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURLWithShortenURL indicates an expected call of GetURLWithShortenURL
func (mr *MockMySQLServiceMockRecorder) GetURLWithShortenURL(shortenURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLWithShortenURL", reflect.TypeOf((*MockMySQLService)(nil).GetURLWithShortenURL), shortenURL)
}

// GetURLsWithUser mocks base method
func (m *MockMySQLService) GetURLsWithUser(user database.User, offset, limit uint64) (uint64, []database.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURLsWithUser", user, offset, limit)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].([]database.URL)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetURLsWithUser indicates an expected call of GetURLsWithUser
func (mr *MockMySQLServiceMockRecorder) GetURLsWithUser(user, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURLsWithUser", reflect.TypeOf((*MockMySQLService)(nil).GetURLsWithUser), user, offset, limit)
}

// DeleteURL mocks base method
func (m *MockMySQLService) DeleteURL(shortenURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteURL", shortenURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteURL indicates an expected call of DeleteURL
func (mr *MockMySQLServiceMockRecorder) DeleteURL(shortenURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteURL", reflect.TypeOf((*MockMySQLService)(nil).DeleteURL), shortenURL)
}

// DeleteUser mocks base method
func (m *MockMySQLService) DeleteUser(user database.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockMySQLServiceMockRecorder) DeleteUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockMySQLService)(nil).DeleteUser), user)
}
